/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var j = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,12],$V1=[1,8],$V2=[1,11],$V3=[1,13],$V4=[1,20],$V5=[1,21],$V6=[1,22],$V7=[1,23],$V8=[1,24],$V9=[1,28],$Va=[1,29],$Vb=[1,30],$Vc=[1,33],$Vd=[1,32],$Ve=[2,5,9,14,17,19,50,51,52,53,54,60,61,67,69,74,77,79],$Vf=[1,41],$Vg=[1,47],$Vh=[1,46],$Vi=[19,24],$Vj=[2,8],$Vk=[1,70],$Vl=[1,60],$Vm=[1,61],$Vn=[1,62],$Vo=[1,64],$Vp=[1,65],$Vq=[1,66],$Vr=[1,67],$Vs=[1,68],$Vt=[1,69],$Vu=[11,24],$Vv=[1,71],$Vw=[2,5,9,11,14,17,19,24,50,51,52,53,54,60,61,67,69,74,77,79],$Vx=[1,85],$Vy=[1,84],$Vz=[1,86],$VA=[1,87],$VB=[1,88],$VC=[1,89],$VD=[1,90],$VE=[1,91],$VF=[1,92],$VG=[1,93],$VH=[1,94],$VI=[1,95],$VJ=[1,96],$VK=[1,97],$VL=[1,98],$VM=[1,99],$VN=[1,100],$VO=[2,5,9,11,14,17,19,22,24,25,26,27,28,29,30,31,33,34,35,36,37,38,39,40,41,42,50,51,52,53,54,60,61,67,69,74,77,79],$VP=[2,62],$VQ=[2,5,9,14,17,19,50,51,52,53,54,56,60,61,67,69,74,77,79],$VR=[1,115],$VS=[1,117],$VT=[2,5,9,11,14,17,19,24,30,31,39,40,50,51,52,53,54,60,61,67,69,74,77,79],$VU=[9,67,69],$VV=[2,5,9,11,14,17,19,22,24,25,30,31,33,34,35,36,37,38,39,40,50,51,52,53,54,60,61,67,69,74,77,79],$VW=[2,5,9,11,14,17,19,22,24,25,26,27,29,30,31,33,34,35,36,37,38,39,40,50,51,52,53,54,60,61,67,69,74,77,79],$VX=[2,5,9,11,14,17,19,24,30,31,33,34,35,36,37,38,39,40,50,51,52,53,54,60,61,67,69,74,77,79],$VY=[1,150];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIAL":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"BLOQUE_SENTENCIAS":7,"llave_abre":8,"llave_cierra":9,"ASIGNACION":10,"punto_coma":11,"DECLARACION":12,"MODIFICADOR":13,"LLAMADA_FUNCION":14,"SENTENCIA_CICLICA":15,"SENTENCIA_CONTROL":16,"break":17,"TIPO_DATO":18,"identificador":19,"op_igual":20,"EXPRESION":21,"resta":22,"par_abre":23,"par_cierra":24,"suma":25,"multiplicacion":26,"division":27,"potencia":28,"op_modulo":29,"op_and":30,"op_or":31,"op_not":32,"op_mayor":33,"op_menor":34,"op_mayor_igual":35,"op_menor_igual":36,"op_doble_igual":37,"op_diferencia":38,"pregunta_cierra":39,"dos_puntos":40,"incremento":41,"decremento":42,"DATO":43,"decimal":44,"entero":45,"verdadero":46,"falso":47,"cadena":48,"caracter":49,"def_entero":50,"def_decimal":51,"def_caracter":52,"def_cadena":53,"def_boolean":54,"IF":55,"else":56,"ELIF":57,"ELSE":58,"CONTROL_SWITCH":59,"if":60,"switch":61,"SWITCH":62,"CASELIST":63,"CASES":64,"CASE":65,"DEFAULTS":66,"case":67,"DEFAULT":68,"default":69,"SENTENCIA_WHILE":70,"SENTENCIA_FOR":71,"SENTENCIA_DOWHILE":72,"WHILE":73,"while":74,"ENCABEZADOFOR":75,"FOR":76,"for":77,"DO":78,"do":79,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"llave_abre",9:"llave_cierra",11:"punto_coma",14:"LLAMADA_FUNCION",17:"break",19:"identificador",20:"op_igual",22:"resta",23:"par_abre",24:"par_cierra",25:"suma",26:"multiplicacion",27:"division",28:"potencia",29:"op_modulo",30:"op_and",31:"op_or",32:"op_not",33:"op_mayor",34:"op_menor",35:"op_mayor_igual",36:"op_menor_igual",37:"op_doble_igual",38:"op_diferencia",39:"pregunta_cierra",40:"dos_puntos",41:"incremento",42:"decremento",44:"decimal",45:"entero",46:"verdadero",47:"falso",48:"cadena",49:"caracter",50:"def_entero",51:"def_decimal",52:"def_caracter",53:"def_cadena",54:"def_boolean",56:"else",60:"if",61:"switch",67:"case",69:"default",74:"while",77:"for",79:"do"},
productions_: [0,[3,2],[3,1],[4,2],[4,1],[7,3],[7,2],[7,2],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[6,2],[6,1],[6,1],[6,2],[12,2],[10,3],[10,4],[21,2],[21,4],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,2],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,5],[21,2],[21,2],[21,1],[43,1],[43,1],[43,1],[43,1],[43,1],[43,1],[43,1],[18,1],[18,1],[18,1],[18,1],[18,1],[13,2],[13,2],[16,6],[16,2],[16,4],[16,1],[55,4],[58,1],[57,4],[57,2],[59,5],[62,3],[63,2],[63,1],[64,2],[64,1],[64,1],[65,3],[66,2],[68,2],[15,1],[15,1],[15,1],[70,2],[73,4],[71,2],[75,7],[75,7],[76,2],[72,7],[78,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 2:
controllador.Grammar.consola +="Editor de texto vacio\n"
break;
case 5:
 
break;
case 7:
 err = new Err.Error("Error Sintactico","Se esperaba un } para cerrar el bloque cerca de:"+ yytext,this._$.first_line,this._$.last_column); controllador.Grammar.listaErrores.push(err);
                        controllador.Grammar.consola+="->Error Sintactico Se esperaba un } para cerrar el bloque cerca de:"+ yytext+" linea "+this._$.first_line+" columna "+this._$.last_column+"\n";
break;
case 8: case 9:
ambAux.agregarSimbolo($$[$0-1]);ambAux.agregarInstruccion($$[$0-1]);
break;
case 10:
ambAux.agregarInstruccion($$[$0-1]);
break;
case 12: case 13:
ambAux.agregarInstruccion($$[$0]);
break;
case 14:
ambAux.agregarInstruccion(new Switch.SentenciaBreack(_$[$0-1].first_line,_$[$0-1].first_column,ambAux));
break;
case 15:
 err = new Err.Error("Error Sintactico","Se esperaba un ; para cerrar la sentencia cerca de:"+ yytext,this._$.first_line,this._$.last_column); controllador.Grammar.listaErrores.push(err); 
            controllador.Grammar.consola+="->Error Sintactico Se esperaba un ; para cerrar la sentencia cerca de:"+ yytext+" en linea "+this._$.first_line+" columna "+this._$.last_column+"\n";
break;
case 16:
 err = new Err.Error("Error Sintactico","Se esperaba un ; para cerrar la sentencia cerca de:"+ yytext,this._$.first_line,this._$.last_column); controllador.Grammar.listaErrores.push(err);
            controllador.Grammar.consola+="->Error Sintactico Se esperaba un ; para cerrar la sentencia cerca de:"+ yytext+" en linea "+this._$.first_line+" columna "+this._$.last_column+"\n";
break;
case 17:
 err = new Err.Error("Error Sintactico","No se esperaba "+ yytext,this._$.first_line,this._$.first_column); controllador.Grammar.listaErrores.push(err);
            controllador.Grammar.consola+="->Error Sintactico Se esperaba un ; para cerrar la sentencia cerca de:"+ yytext+" en linea "+this._$.first_line+" columna "+this._$.last_column+"\n";
break;
case 18:
 simAux = new S.simbolo($$[$0-1].getTipoDato(),$$[$0-1].getValor()); 
this.$ = new Dec.Declaracion(E.tipoExpresion.identificador,_$[$0].first_line,_$[$0].first_column,simAux.tipo,null,ambAux,$$[$0],null)
break;
case 19:
this.$=new Asig.Asignacion(_$[$0-2].first_line,_$[$0-2].first_column,$$[$0],String($$[$0-2]));
break;
case 20:

        this.$ = new Dec.Declaracion(E.tipoExpresion.identificador,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-3].tipo,$$[$0].simbol.getValor(),ambAux,$$[$0-2],$$[$0]);
break;
case 21:
this.$ = new E.expresion(null,$$[$0],E.tipoExpresion.multiplicacion,_$[$0].first_line,_$[$0].first_column,null,null,null,null,ambAux);
break;
case 22:
this.$ = new E.expresion(null,$$[$0],E.tipoExpresion.casteo,_$[$0-2].first_line,_$[$0-2].first_column,null,null,null,$$[$0-2],ambAux);
break;
case 23:
 this.$ = new E.expresion($$[$0],$$[$0-2],E.tipoExpresion.suma,_$[$0-1].first_line,_$[$0-1].first_column,null,null,null,null,ambAux);
break;
case 24:
 this.$ = new E.expresion($$[$0],$$[$0-2],E.tipoExpresion.resta,_$[$0-1].first_line,_$[$0-1].first_column,null,null,null,null);
break;
case 25:
 this.$ = new E.expresion($$[$0],$$[$0-2],E.tipoExpresion.multiplicacion,_$[$0-1].first_line,_$[$0-1].first_column,null,null,null,null,ambAux);
break;
case 26:
 this.$ = new E.expresion($$[$0],$$[$0-2],E.tipoExpresion.division,_$[$0-1].first_line,_$[$0-1].first_column,null,null,null,null,ambAux);
break;
case 27:
 this.$ = new E.expresion($$[$0],$$[$0-2],E.tipoExpresion.potencia,_$[$0-1].first_line,_$[$0-1].first_column,null,null,null,null,ambAux);
break;
case 28:
 this.$ = new E.expresion($$[$0],$$[$0-2],E.tipoExpresion.modulo,_$[$0-1].first_line,_$[$0-1].first_column,null,null,null,null,ambAux);
break;
case 29:
this.$ = $$[$0-1]
break;
case 30:
this.$ = new E.expresion($$[$0],$$[$0-2],E.tipoExpresion.and,_$[$0-1].first_line,_$[$0-1].first_column,null,null,null,null,ambAux);
break;
case 31:
this.$ = new E.expresion($$[$0],$$[$0-2],E.tipoExpresion.or,_$[$0-1].first_line,_$[$0-1].first_column,null,null,null,null,ambAux);
break;
case 32:
this.$ = new E.expresion(null,$$[$0],E.tipoExpresion.not,_$[$0].first_line,_$[$0].first_column,null,null,null,null,ambAux);
break;
case 33:
this.$ = new E.expresion($$[$0],$$[$0-2],E.tipoExpresion.mayor_que,_$[$0-1].first_line,_$[$0-1].first_column,null,null,null,null,ambAux);
break;
case 34:
this.$ = new E.expresion($$[$0],$$[$0-2],E.tipoExpresion.menor_que,_$[$0-1].first_line,_$[$0-1].first_column,null,null,null,null,ambAux);
break;
case 35:
this.$ = new E.expresion($$[$0],$$[$0-2],E.tipoExpresion.mayor_igual_que,_$[$0-1].first_line,_$[$0-1].first_column,null,null,null,null,ambAux);
break;
case 36:
this.$ = new E.expresion($$[$0],$$[$0-2],E.tipoExpresion.menor_igual_que,_$[$0-1].first_line,_$[$0-1].first_column,null,null,null,null,ambAux);
break;
case 37:
this.$ = new E.expresion($$[$0],$$[$0-2],E.tipoExpresion.igualdad,_$[$0-1].first_line,_$[$0-1].first_column,null,null,null,null,ambAux);
break;
case 38:
this.$ = new E.expresion($$[$0],$$[$0-2],E.tipoExpresion.diferencia,_$[$0-1].first_line,_$[$0-1].first_column,null,null,null,null,ambAux);
break;
case 39:
this.$ = new E.expresion($$[$0],$$[$0-2],E.tipoExpresion.ternario,_$[$0-3].first_line,_$[$0-3].first_column,null,null,$$[$0-4],null,ambAux);
break;
case 40:
this.$ = new E.expresion(null,$$[$0-1],E.tipoExpresion.incremento,_$[$0].first_line,_$[$0].first_column,null,null,null,null,ambAux);
break;
case 41:
this.$ = new E.expresion(null,$$[$0-1],E.tipoExpresion.decremento,_$[$0].first_line,_$[$0].first_column,null,null,null,null,ambAux);
break;
case 42:
this.$=$$[$0] 
break;
case 43:
this.$ = new E.expresion(null,null,E.tipoExpresion.numero,_$[$0].first_line,_$[$0].first_column,S.tipoDatos.decimal,String($$[$0]),null,null,ambAux);
break;
case 44:
this.$ = new E.expresion(null,null,E.tipoExpresion.numero,_$[$0].first_line,_$[$0].first_column,S.tipoDatos.entero,String($$[$0]),null,null,ambAux);
break;
case 45: case 46:
this.$ = new E.expresion(null,null,E.tipoExpresion.booleano,_$[$0].first_line,_$[$0].first_column,S.tipoDatos.booleano,String($$[$0]),null,null,ambAux);
break;
case 47:
this.$ = new E.expresion(null,null,E.tipoExpresion.cadena,_$[$0].first_line,_$[$0].first_column,S.tipoDatos.cadena,String($$[$0]).slice(1,-1),null,null,ambAux);
break;
case 48:
this.$ = new E.expresion(null,null,E.tipoExpresion.caracter,_$[$0].first_line,_$[$0].first_column,S.tipoDatos.caracter,String($$[$0]).slice(1,-1),null,null,ambAux);
break;
case 49:
this.$=new E.expresion(null,null,E.tipoExpresion.identificador,_$[$0].first_line,_$[$0].first_column,null,String($$[$0]),null,null,null,ambAux)
break;
case 50:
this.$ = new S.simbolo(S.tipoDatos.entero,null);
break;
case 51:
this.$ = new S.simbolo(S.tipoDatos.decimal,null);
break;
case 52:
this.$ = new S.simbolo(S.tipoDatos.caracter,null);
break;
case 53:
this.$ = new S.simbolo(S.tipoDatos.cadena,null);
break;
case 54:
this.$ = new S.simbolo(S.tipoDatos.booleano,null);
break;
case 55:
$$[$0-1]=new E.expresion(null,null,E.tipoExpresion.identificador,_$[$0-1].first_line,_$[$0-1].first_column,null,String($$[$0-1]),null,null,ambAux);
this.$ = new E.expresion(null,$$[$0-1],E.tipoExpresion.incremento,_$[$0-1].first_line,_$[$0].first_column,null,null,null,null,ambAux); 
break;
case 56:
$$[$0-1]=new E.expresion(null,null,E.tipoExpresion.identificador,_$[$0-1].first_line,_$[$0-1].first_column,null,String($$[$0-1]),null,null,ambAux);
this.$ = new E.expresion(null,$$[$0-1],E.tipoExpresion.decremento,_$[$0].first_line,_$[$0].first_column,null,null,null,null,ambAux); 
break;
case 57:
let eli=new elif.Elif(_$[$0-5].first_line,_$[$0-5].first_column);
                eli.agregarInicial($$[$0-5]); eli.agregarIf($$[$0-2]); eli.agregarSentencias(listIf); ambAux=ambAux.getPadre(); this.$=eli; listIf=[]
break;
case 58: case 78: case 80:
this.$=$$[$0-1];ambAux=ambAux.getPadre()
break;
case 59:
this.$=$$[$0-3];this.$.agregarElse($$[$0-1]) ;ambAux=ambAux.getPadre()
break;
case 60:
listIf=[]
break;
case 61:
ambAux = new Amb.Ambiente(ambAux,"Sentencia IF"); this.$ =new If.IfSentence(_$[$0-3].first_line,_$[$0-3].first_column,$$[$0-1],ambAux);
break;
case 62:
ambAux = new Amb.Ambiente(ambAux.getPadre(),"Sentencia ELSE"); this.$ =new If.SentenciaElse(_$[$0].first_line,_$[$0].first_column,ambAux);
break;
case 63:
listIf.push($$[$0-2]);ambAux=ambAux.getPadre();
break;
case 64:
listIf.push($$[$0-1]);ambAux=ambAux.getPadre()
break;
case 65:
this.$=$$[$0-3];this.$.ingresarCases(listIf)
break;
case 66:
this.$=new Switch.SentenciaSwitch(_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-1],ambAux);
break;
case 67:
listIf.push($$[$0-1]);
break;
case 68:
listIf.push($$[$0]); 
break;
case 69:
this.$=$$[$0-1]; ambAux = ambAux.getPadre(); 
break;
case 70:
this.$=$$[$0]; ambAux = ambAux.getPadre();
break;
case 72:
ambAux=new Amb.Ambiente(ambAux,"case "+listIf.length);
        this.$=new Switch.CaseSentencia(_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-1],ambAux);
break;
case 73:
this.$=$$[$0-1]; ambAux = ambAux.getPadre();listIf.push($$[$0-1]);
break;
case 74:
ambAux=new Amb.Ambiente(ambAux,"case "+listIf.length);
        this.$=new Switch.CaseSentencia(_$[$0-1].first_line,_$[$0-1].first_column,null,ambAux);
        this.$.siDefault()
break;
case 75: case 76:
this.$=$$[$0]
break;
case 77:
this.$=$$[$0];ambAux=ambAux.getPadre()
break;
case 79:
ambAux = new Amb.Ambiente(ambAux,"Ciclo While");
                this.$=new While.WhileSentencia(_$[$0-3].first_line,_$[$0-3].first_column,$$[$0-1],ambAux);
break;
case 81: case 82:

        this.$=new For.Ciclo_For(_$[$0-6].first_line,_$[$0-6].first_column,$$[$0-5],$$[$0-3],$$[$0-1],ambAux);
break;
case 83:
ambAux = new Amb.Ambiente(ambAux,"Ciclo For");
break;
case 84:
this.$=new DoWhile.doWhile(_$[$0-6].first_line,_$[$0-6].first_column,$$[$0-2],ambAux);
break;
case 85:
ambAux = new Amb.Ambiente(ambAux,"Ciclo Do-While");
break;
}
},
table: [{2:$V0,3:1,4:2,5:[1,3],6:4,10:5,12:6,13:7,14:$V1,15:9,16:10,17:$V2,18:14,19:$V3,50:$V4,51:$V5,52:$V6,53:$V7,54:$V8,55:18,59:19,60:$V9,61:$Va,70:15,71:16,72:17,73:25,74:$Vb,75:26,76:31,77:$Vc,78:27,79:$Vd},{1:[3]},{2:$V0,5:[1,34],6:35,10:5,12:6,13:7,14:$V1,15:9,16:10,17:$V2,18:14,19:$V3,50:$V4,51:$V5,52:$V6,53:$V7,54:$V8,55:18,59:19,60:$V9,61:$Va,70:15,71:16,72:17,73:25,74:$Vb,75:26,76:31,77:$Vc,78:27,79:$Vd},{1:[2,2]},o($Ve,[2,4]),o($Ve,[2,15],{11:[1,36]}),o($Ve,[2,16],{11:[1,37]}),{11:[1,38]},o($Ve,[2,11]),o($Ve,[2,12]),o($Ve,[2,13]),{11:[1,39]},{11:[1,40]},{20:$Vf,41:[1,42],42:[1,43]},{19:[1,44]},o($Ve,[2,75]),o($Ve,[2,76]),o($Ve,[2,77]),{2:$Vg,7:45,8:$Vh},o($Ve,[2,60]),o($Vi,[2,50]),o($Vi,[2,51]),o($Vi,[2,52]),o($Vi,[2,53]),o($Vi,[2,54]),{2:$Vg,7:48,8:$Vh},{2:$Vg,7:49,8:$Vh},{2:$Vg,7:50,8:$Vh},{23:[1,51]},{23:[1,53],62:52},{23:[1,54]},{10:55,18:57,19:[1,56],50:$V4,51:$V5,52:$V6,53:$V7,54:$V8},o($Vj,[2,85]),{23:[1,58]},{1:[2,1]},o($Ve,[2,3]),o($Ve,$Vj),o($Ve,[2,9]),o($Ve,[2,10]),o($Ve,[2,14]),o($Ve,[2,17]),{19:$Vk,21:59,22:$Vl,23:$Vm,32:$Vn,43:63,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt},o($Vu,[2,55]),o($Vu,[2,56]),o([2,5,9,11,14,17,19,50,51,52,53,54,60,61,67,69,74,77,79],[2,18],{20:$Vv}),o($Ve,[2,58],{58:73,56:[1,72]}),{2:$V0,4:74,6:4,9:[1,75],10:5,12:6,13:7,14:$V1,15:9,16:10,17:$V2,18:14,19:$V3,50:$V4,51:$V5,52:$V6,53:$V7,54:$V8,55:18,59:19,60:$V9,61:$Va,70:15,71:16,72:17,73:25,74:$Vb,75:26,76:31,77:$Vc,78:27,79:$Vd},{9:[1,76]},o($Ve,[2,78]),o($Ve,[2,80]),{74:[1,77]},{19:$Vk,21:78,22:$Vl,23:$Vm,32:$Vn,43:63,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt},{8:[1,79]},{19:$Vk,21:80,22:$Vl,23:$Vm,32:$Vn,43:63,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt},{19:$Vk,21:81,22:$Vl,23:$Vm,32:$Vn,43:63,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt},{11:[1,82]},{20:$Vf},{19:[1,83]},o([19,50,51,52,53,54],[2,83]),o($Vw,[2,19],{22:$Vx,25:$Vy,26:$Vz,27:$VA,28:$VB,29:$VC,30:$VD,31:$VE,33:$VF,34:$VG,35:$VH,36:$VI,37:$VJ,38:$VK,39:$VL,41:$VM,42:$VN}),{19:$Vk,21:101,22:$Vl,23:$Vm,32:$Vn,43:63,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt},{18:102,19:$Vk,21:103,22:$Vl,23:$Vm,32:$Vn,43:63,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$V4,51:$V5,52:$V6,53:$V7,54:$V8},{19:$Vk,21:104,22:$Vl,23:$Vm,32:$Vn,43:63,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt},o($VO,[2,42]),o($VO,[2,43]),o($VO,[2,44]),o($VO,[2,45]),o($VO,[2,46]),o($VO,[2,47]),o($VO,[2,48]),o($VO,[2,49]),{19:$Vk,21:105,22:$Vl,23:$Vm,32:$Vn,43:63,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt},o($Vj,$VP,{55:106,60:$V9}),{2:$Vg,7:107,8:$Vh},{2:$V0,6:35,9:[1,108],10:5,12:6,13:7,14:$V1,15:9,16:10,17:$V2,18:14,19:$V3,50:$V4,51:$V5,52:$V6,53:$V7,54:$V8,55:18,59:19,60:$V9,61:$Va,70:15,71:16,72:17,73:25,74:$Vb,75:26,76:31,77:$Vc,78:27,79:$Vd},o($VQ,[2,6]),o($VQ,[2,7]),{23:[1,109]},{22:$Vx,24:[1,110],25:$Vy,26:$Vz,27:$VA,28:$VB,29:$VC,30:$VD,31:$VE,33:$VF,34:$VG,35:$VH,36:$VI,37:$VJ,38:$VK,39:$VL,41:$VM,42:$VN},{63:111,64:112,65:113,66:114,67:$VR,68:116,69:$VS},{22:$Vx,24:[1,118],25:$Vy,26:$Vz,27:$VA,28:$VB,29:$VC,30:$VD,31:$VE,33:$VF,34:$VG,35:$VH,36:$VI,37:$VJ,38:$VK,39:$VL,41:$VM,42:$VN},{22:$Vx,24:[1,119],25:$Vy,26:$Vz,27:$VA,28:$VB,29:$VC,30:$VD,31:$VE,33:$VF,34:$VG,35:$VH,36:$VI,37:$VJ,38:$VK,39:$VL,41:$VM,42:$VN},{19:$Vk,21:120,22:$Vl,23:$Vm,32:$Vn,43:63,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt},{20:$Vv},{19:$Vk,21:121,22:$Vl,23:$Vm,32:$Vn,43:63,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt},{19:$Vk,21:122,22:$Vl,23:$Vm,32:$Vn,43:63,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt},{19:$Vk,21:123,22:$Vl,23:$Vm,32:$Vn,43:63,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt},{19:$Vk,21:124,22:$Vl,23:$Vm,32:$Vn,43:63,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt},{19:$Vk,21:125,22:$Vl,23:$Vm,32:$Vn,43:63,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt},{19:$Vk,21:126,22:$Vl,23:$Vm,32:$Vn,43:63,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt},{19:$Vk,21:127,22:$Vl,23:$Vm,32:$Vn,43:63,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt},{19:$Vk,21:128,22:$Vl,23:$Vm,32:$Vn,43:63,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt},{19:$Vk,21:129,22:$Vl,23:$Vm,32:$Vn,43:63,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt},{19:$Vk,21:130,22:$Vl,23:$Vm,32:$Vn,43:63,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt},{19:$Vk,21:131,22:$Vl,23:$Vm,32:$Vn,43:63,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt},{19:$Vk,21:132,22:$Vl,23:$Vm,32:$Vn,43:63,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt},{19:$Vk,21:133,22:$Vl,23:$Vm,32:$Vn,43:63,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt},{19:$Vk,21:134,22:$Vl,23:$Vm,32:$Vn,43:63,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt},{19:$Vk,21:135,22:$Vl,23:$Vm,32:$Vn,43:63,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt},o($VO,[2,40]),o($VO,[2,41]),o($VO,[2,21]),{24:[1,136]},{22:$Vx,24:[1,137],25:$Vy,26:$Vz,27:$VA,28:$VB,29:$VC,30:$VD,31:$VE,33:$VF,34:$VG,35:$VH,36:$VI,37:$VJ,38:$VK,39:$VL,41:$VM,42:$VN},o($VT,[2,32],{22:$Vx,25:$Vy,26:$Vz,27:$VA,28:$VB,29:$VC,33:$VF,34:$VG,35:$VH,36:$VI,37:$VJ,38:$VK,41:$VM,42:$VN}),o($Vw,[2,20],{22:$Vx,25:$Vy,26:$Vz,27:$VA,28:$VB,29:$VC,30:$VD,31:$VE,33:$VF,34:$VG,35:$VH,36:$VI,37:$VJ,38:$VK,39:$VL,41:$VM,42:$VN}),{2:$Vg,7:138,8:$Vh},o($Ve,[2,59]),o($VQ,[2,5]),{19:$Vk,21:139,22:$Vl,23:$Vm,32:$Vn,43:63,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt},o($Vj,[2,61]),{9:[1,140]},{9:[2,68],63:141,64:112,65:113,66:114,67:$VR,68:116,69:$VS},o($VU,[2,70],{6:4,10:5,12:6,13:7,15:9,16:10,18:14,70:15,71:16,72:17,55:18,59:19,73:25,75:26,78:27,76:31,4:142,2:$V0,14:$V1,17:$V2,19:$V3,50:$V4,51:$V5,52:$V6,53:$V7,54:$V8,60:$V9,61:$Va,74:$Vb,77:$Vc,79:$Vd}),o($VU,[2,71]),{19:$Vk,21:143,22:$Vl,23:$Vm,32:$Vn,43:63,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt},{2:$V0,4:144,6:4,10:5,12:6,13:7,14:$V1,15:9,16:10,17:$V2,18:14,19:$V3,50:$V4,51:$V5,52:$V6,53:$V7,54:$V8,55:18,59:19,60:$V9,61:$Va,70:15,71:16,72:17,73:25,74:$Vb,75:26,76:31,77:$Vc,78:27,79:$Vd},{40:[1,145]},{8:[2,66]},o($Vj,[2,79]),{11:[1,146],22:$Vx,25:$Vy,26:$Vz,27:$VA,28:$VB,29:$VC,30:$VD,31:$VE,33:$VF,34:$VG,35:$VH,36:$VI,37:$VJ,38:$VK,39:$VL,41:$VM,42:$VN},o($VV,[2,23],{26:$Vz,27:$VA,28:$VB,29:$VC,41:$VM,42:$VN}),o($VV,[2,24],{26:$Vz,27:$VA,28:$VB,29:$VC,41:$VM,42:$VN}),o($VW,[2,25],{28:$VB,41:$VM,42:$VN}),o($VW,[2,26],{28:$VB,41:$VM,42:$VN}),o($VO,[2,27]),o($VW,[2,28],{28:$VB,41:$VM,42:$VN}),o($VT,[2,30],{22:$Vx,25:$Vy,26:$Vz,27:$VA,28:$VB,29:$VC,33:$VF,34:$VG,35:$VH,36:$VI,37:$VJ,38:$VK,41:$VM,42:$VN}),o([2,5,9,11,14,17,19,24,31,39,40,50,51,52,53,54,60,61,67,69,74,77,79],[2,31],{22:$Vx,25:$Vy,26:$Vz,27:$VA,28:$VB,29:$VC,30:$VD,33:$VF,34:$VG,35:$VH,36:$VI,37:$VJ,38:$VK,41:$VM,42:$VN}),o($VX,[2,33],{22:$Vx,25:$Vy,26:$Vz,27:$VA,28:$VB,29:$VC,41:$VM,42:$VN}),o($VX,[2,34],{22:$Vx,25:$Vy,26:$Vz,27:$VA,28:$VB,29:$VC,41:$VM,42:$VN}),o($VX,[2,35],{22:$Vx,25:$Vy,26:$Vz,27:$VA,28:$VB,29:$VC,41:$VM,42:$VN}),o($VX,[2,36],{22:$Vx,25:$Vy,26:$Vz,27:$VA,28:$VB,29:$VC,41:$VM,42:$VN}),o($VX,[2,37],{22:$Vx,25:$Vy,26:$Vz,27:$VA,28:$VB,29:$VC,41:$VM,42:$VN}),o($VX,[2,38],{22:$Vx,25:$Vy,26:$Vz,27:$VA,28:$VB,29:$VC,41:$VM,42:$VN}),{22:$Vx,25:$Vy,26:$Vz,27:$VA,28:$VB,29:$VC,30:$VD,31:$VE,33:$VF,34:$VG,35:$VH,36:$VI,37:$VJ,38:$VK,39:$VL,40:[1,147],41:$VM,42:$VN},{19:$Vk,21:148,22:$Vl,23:$Vm,32:$Vn,43:63,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt},o($VO,[2,29]),{56:$VY,57:149,58:151},{22:$Vx,24:[1,152],25:$Vy,26:$Vz,27:$VA,28:$VB,29:$VC,30:$VD,31:$VE,33:$VF,34:$VG,35:$VH,36:$VI,37:$VJ,38:$VK,39:$VL,41:$VM,42:$VN},o($Ve,[2,65]),{9:[2,67]},o($VU,[2,69],{10:5,12:6,13:7,15:9,16:10,18:14,70:15,71:16,72:17,55:18,59:19,73:25,75:26,78:27,76:31,6:35,2:$V0,14:$V1,17:$V2,19:$V3,50:$V4,51:$V5,52:$V6,53:$V7,54:$V8,60:$V9,61:$Va,74:$Vb,77:$Vc,79:$Vd}),{22:$Vx,25:$Vy,26:$Vz,27:$VA,28:$VB,29:$VC,30:$VD,31:$VE,33:$VF,34:$VG,35:$VH,36:$VI,37:$VJ,38:$VK,39:$VL,40:[1,153],41:$VM,42:$VN},o($VU,[2,73],{10:5,12:6,13:7,15:9,16:10,18:14,70:15,71:16,72:17,55:18,59:19,73:25,75:26,78:27,76:31,6:35,2:$V0,14:$V1,17:$V2,19:$V3,50:$V4,51:$V5,52:$V6,53:$V7,54:$V8,60:$V9,61:$Va,74:$Vb,77:$Vc,79:$Vd}),o([2,14,17,19,50,51,52,53,54,60,61,74,77,79],[2,74]),{10:155,13:154,18:57,19:$V3,50:$V4,51:$V5,52:$V6,53:$V7,54:$V8},{19:$Vk,21:156,22:$Vl,23:$Vm,32:$Vn,43:63,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt},o($VO,[2,22]),o($Ve,[2,57]),o($Vj,$VP,{55:157,60:$V9}),{2:$Vg,7:158,8:$Vh},{11:[1,159]},o([2,9,14,17,19,50,51,52,53,54,60,61,67,69,74,77,79],[2,72]),{24:[1,160]},{24:[1,161]},o([2,5,9,11,14,17,19,24,39,40,50,51,52,53,54,60,61,67,69,74,77,79],[2,39],{22:$Vx,25:$Vy,26:$Vz,27:$VA,28:$VB,29:$VC,30:$VD,31:$VE,33:$VF,34:$VG,35:$VH,36:$VI,37:$VJ,38:$VK,41:$VM,42:$VN}),{2:$Vg,7:162,8:$Vh},o($Ve,[2,64]),o($Ve,[2,84]),o($Vj,[2,81]),o($Vj,[2,82]),{56:$VY,57:163,58:151},o($Ve,[2,63])],
defaultActions: {3:[2,2],34:[2,1],118:[2,66],141:[2,67]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

const controllador = require("./controllers/Grammar")
const E = require("./calses/expresiones/expresion") // clase expresion
const Err = require("./calses/error") // clase error
const Amb = require("./Enviroment/enviroment") //clase ambiente
const S = require("./Enviroment/simbolos") // clase simbolo
const I = require("./Enviroment/instruccion")//clase instruccion
const Dec = require("./calses/manejoVariables/Declaracion") // clase declaracion
const Asig = require("./calses/manejoVariables/asignacion") // clase asignacion 
const If = require("./calses/sentenciasControl/sentenciaIF") // clase IF
const elif = require("./calses/sentenciasControl/sentenciaElif") // clase ELIF
const Switch = require("./calses/sentenciasControl/SwitchSentencia") //clase SWITCH
const While = require("./calses/sentenciasCiclicas/while") // clase while
const For = require("./calses/sentenciasCiclicas/cicloFor") // clase For
const DoWhile = require("./calses/sentenciasCiclicas/dowhile") // clase DoWhile
var err;
var simAux;
var ambAux =controllador.Grammar.ambienteGlobal;
var listIf = [];
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:return 'func_exec';
break;
case 3:return 50;
break;
case 4:return 51;
break;
case 5:return 52;
break;
case 6:return 53;
break;
case 7:return 54;
break;
case 8:return 'esc_salto_linea';
break;
case 9:return 'esc_comilla_doble';
break;
case 10:return 'esc_tabulacion';
break;
case 11:return 'esc_comilla_simple';
break;
case 12:return 'esc_barra_invertida';
break;
case 13:return 41;
break;
case 14:return 42;
break;
case 15:return 25;
break;
case 16:return 22;
break;
case 17:return 26;
break;
case 18:return 27;
break;
case 19:return 28;
break;
case 20:return 29;
break;
case 21:return 37;
break;
case 22:return 36;
break;
case 23:return 35;
break;
case 24:return 38;
break;
case 25:return 20;
break;
case 26:return 34;
break;
case 27:return 33;
break;
case 28:return 40;
break;
case 29:return 39;
break;
case 30:return 31;
break;
case 31:return 30;
break;
case 32:return 32;    
break;
case 33:return 23;
break;
case 34:return 24;    
break;
case 35:return 11;
break;
case 36:return 8;
break;
case 37:return 9;
break;
case 38:
break;
case 39:
break;
case 40:return 60;
break;
case 41:return 56;
break;
case 42:return 61;
break;
case 43:return 67;
break;
case 44:return 17;
break;
case 45:return 69; 
break;
case 46:return "while"   
break;
case 47:return "for";  
break;
case 48:return "do";
break;
case 49:return 44;
break;
case 50:return 45;
break;
case 51:return 48;
break;
case 52:return 49;
break;
case 53:return 46;
break;
case 54:return 47;
break;
case 55:return 19
break;
case 56:return 5;
break;
case 57:let err = new Err.Error("Error Lexico","No se esperaba "+ yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column); controllador.Grammar.listaErrores.push(err); 
controllador.Grammar.consola +="->Error Lexico No se esperaba "+ yy_.yytext+" en linea "+yy_.yylloc.first_line+" columna "+yy_.yylloc.first_column+"\n"; 
break;
}
},
rules: [/^(?:(\/{2,})([^\n])*\n)/i,/^(?:\/\*(([^\n\r]|\n)*)(\*\/))/i,/^(?:exec\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:boolean\b)/i,/^(?:\\n)/i,/^(?:\\")/i,/^(?:\\t)/i,/^(?:\\')/i,/^(?:\\)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:==)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:!=)/i,/^(?:=)/i,/^(?:<)/i,/^(?:>)/i,/^(?::)/i,/^(?:\?)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:;)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:[ \r\t])/i,/^(?:\n)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:break\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:(")([^\"\\]|\\.)*("))/i,/^(?:'([^']*)')/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:([a-z]|[A-Z])+([a-z]|[0-9]|_)*\b)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = j;
exports.Parser = j.Parser;
exports.parse = function () { return j.parse.apply(j, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}